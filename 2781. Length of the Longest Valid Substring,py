"""
2781. Length of the Longest Valid Substring
You are given a string word and an array of strings forbidden.

A string is called valid if none of its substrings are present in forbidden.

Return the length of the longest valid substring of the string word.

A substring is a contiguous sequence of characters in a string, possibly empty.

 

Example 1:

Input: word = "cbaaaabc", forbidden = ["aaa","cb"]
Output: 4
Explanation: There are 11 valid substrings in word: "c", "b", "a", "ba", "aa", "bc", "baa", "aab", "ab", "abc" and "aabc". The length of the longest valid substring is 4. 
It can be shown that all other substrings contain either "aaa" or "cb" as a substring. 
Example 2:

Input: word = "leetcode", forbidden = ["de","le","e"]
Output: 4
Explanation: There are 11 valid substrings in word: "l", "t", "c", "o", "d", "tc", "co", "od", "tco", "cod", and "tcod". The length of the longest valid substring is 4.
It can be shown that all other substrings contain either "de", "le", or "e" as a substring. 

"""

class Solution:
    def longestValidSubstring(self, word, forbidden):
        forbidden_set = set(forbidden)

        res=0

        right = len(word)-1

        for left in range(right, -1, -1):
            for k in range(left, min(left+10, right+1)):
                print(word[left:k+1])
                if word[left:k+1] in forbidden_set:
                    right=k-1
                    break
            res = max(res, right-left+1)

        return res